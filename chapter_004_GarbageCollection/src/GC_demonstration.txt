Любой объект содержит строку заголовка, размер которой зависит от архитектуры процессора и равен 8|16 байт соответственно.
При этом, всегда присутствует заполнение байтов до кратности 8.
То есть, объект класса class FullEmpty{}, будет по логике занимать только 8|16 байт. А объект класса AlmostEmpty{int a;} уже будет
занимать 8|16 + 4 (int) + 4 (выравнивание) = 16/24 байт.

Демонстрация работы в классе User (размер объекта которого за счёт внутренней коллекции ~390кБ):
Если мы зададим верхнюю границу Heap как 8 МБ, то
GC в среднем будет убивать объект почти сразу после его создания(т.к. объекты даже не инициализируются), но, иногда,
он начинает ждать "критического" уровня памяти и потом убивает сразу все бесхозные объекты.

Если мы зададим верхнюю границу Heap как 5 МБ (минимально возможная, которую я смог поставить для компиляции), то GC
вообще в какой-то момент не успеет отработать и выпадет OutOfMemoryError, хотя до этого при абсолютно таких же
показателях памяти - он успевал, что... странно и невоспроизводимо со 100% вероятностью.